////
//// Created by Shalev Shitrit on 04/06/2024.
////
//
//#include "ThreadsManager.h"
//#include <queue>
//#include <signal.h>
//
//#define SECOND 1000000
//
//// See full documentation in "ThreadsManager.h"
//ThreadsManager::ThreadsManager ()
//{
//  // initialize the id min heap (id from 0 to 99)
//  for (int i = 0; i < MAX_THREAD_NUM; ++i)
//  {
//    _min_heap_id.push (i);
//  }
//}
//
//void
//
//void ThreadsManager::start_timer (int quantum_usecs)
//{
//
//  struct sigaction sa = {0};
//  // Install timer_handler as the signal handler for SIGVTALRM.
//  sa.sa_handler = &save_time_vars;
//  if (sigaction (SIGVTALRM, &sa, NULL) < 0)
//  {
//    fprintf (stderr, "system error: setitimer error.");
//    exit (1);
//  }
//
//  // Configure the timer to expire after 1 sec... */
//  // first time interval, seconds part
//  _timer.it_value.tv_sec = quantum_usecs / SECOND;
//  // first time interval, microseconds part
//  _timer.it_value.tv_usec = quantum_usecs % SECOND;
//
//  // configure the timer to expire every 3 sec after that.
//  // following time intervals, seconds part
//  _timer.it_interval.tv_sec = quantum_usecs / SECOND;
//  // following time intervals, microseconds part
//  _timer.it_interval.tv_usec = quantum_usecs % SECOND;
//
//  if (setitimer (ITIMER_VIRTUAL, &_timer, NULL))
//  {
//    fprintf (stderr, "system error: setitimer error.\n");
//    exit (1)
//  }
//}
//
//bool ThreadsManager::add_new_thread ()
//{
//  unsigned int new_id = _min_heap_id.top ();
//  _min_heap_id.pop ();
//
//  // check if has to create the main thread
//  if (new_id == 0)
//  {
//    Thread *new_thread = new Thread (new_id, RUNNING, NULL, 1);
//  }
//  else
//  {
//    Thread *new_thread =
//  }
//
//  _threads.push_back (new_thread);
//  return true;
//}









////
//// Created by Shalev Shitrit on 04/06/2024.
////
//
//#ifndef _THREAD_H_
//#define _THREAD_H_
//
//#include <csetjmp>
//#define STACK_SIZE 4096 /* stack size per thread (in bytes) */
//
////TODO need 32 and 64???
//typedef unsigned long address_t;
//#define JB_SP 6
//#define JB_PC 7
//
//address_t translate_address (address_t addr)
//{
//  address_t ret;
//  asm volatile("xor    %%fs:0x30,%0\n"
//               "rol    $0x11,%0\n"
//      : "=g" (ret)
//      : "0" (addr));
//  return ret;
//}
//
//typedef void (*thread_entry_point) (void);
//
//typedef enum
//{
//    RUNNING, READY, BLOCKED, SLEEPING
//} thread_state;
//
//class Thread
//{
// private:
//  unsigned int _id;
//  thread_state _state;
//  char _stack[STACK_SIZE];
//  int _quantum; // TODO need??
//  sigjmp_buf _env;
//
// public:
//  Thread (unsigned int id, thread_state state, thread_entry_point
//  entry_point, char *stack, int quantum);
//};
//
//#endif //_THREAD_H_







////
//// Created by Shalev Shitrit on 04/06/2024.
////
//
//#include "Thread.h"
//#include <memory>
//
//Thread::Thread (unsigned int id, thread_state state, thread_entry_point
//entry_point, char *stack, int quantum) :
//    _id (id), _state (state), _quantum (quantum)
//{
//  address_t sp = (address_t) stack + STACK_SIZE - sizeof (address_t);
//  address_t pc = (address_t) entry_point;
//
//  sigsetjmp (_env, 1);
//  (_env->__jmpbuf)[JB_SP] = translate_address (sp);
//  (_env->__jmpbuf)[JB_PC] = translate_address (pc);
//  sigemptyset (&_env->__saved_mask);
//}
